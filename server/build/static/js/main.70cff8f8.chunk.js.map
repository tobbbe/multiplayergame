{"version":3,"sources":["components/Tile.js","serviceWorker.js","index.js","App.js"],"names":["Tile","React","memo","_ref","player","_useState","useState","_useState2","Object","slicedToArray","classNames","setClass","useEffect","react_default","a","createElement","className","Boolean","window","location","hostname","match","ReactDOM","render","gameState","setGameState","_useState3","_useState4","setPlayer","cachedPlayer","JSON","parse","localStorage","getItem","console","log","origin","socket","io","query","id","transports","addEventListener","e","payload","keyCode","emit","type","on","data","setItem","stringify","close","tiles","map","row","ri","tile","i","src_components_Tile","assign","key","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPAwBeA,eArBFC,IAAMC,KAAK,SAAAC,GAA0B,IAAVC,EAAUD,EAAVC,OAAUC,EAClBC,mBAAS,QADSC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC1CK,EAD0CH,EAAA,GAC9BI,EAD8BJ,EAAA,GAgBjD,OAbAK,oBAAU,WAERD,EADGP,EACM,mBAGA,SAMR,CAACA,IAGHS,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,OCREO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOV,EAAAC,EAAAC,cCGD,WAAe,IAAAV,EACKC,mBAAS,IADdC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACtBmB,EADsBjB,EAAA,GACXkB,EADWlB,EAAA,GAAAmB,EAEDpB,qBAFCqB,EAAAnB,OAAAC,EAAA,EAAAD,CAAAkB,EAAA,GAEdE,GAFcD,EAAA,GAAAA,EAAA,IAiE7B,OA7DAf,oBAAU,WACT,IAAMiB,EAAeC,KAAKC,MAAMC,aAAaC,QAAQ,eAAiB,MACtEL,EAAUC,GAEVK,QAAQC,IAAI,8BAA+BjB,OAAOC,SAASiB,QAC3D,IAAMC,EAASnB,OAAOoB,GAAGpB,OAAOC,SAASiB,OAAQ,CAChDG,MAAOV,EAAaW,GAAK,YAAcX,EAAaW,GAAK,GACzDC,WAAY,CAAC,eAmDd,OAhDAvB,OAAOwB,iBAAiB,UAAW,SAAAC,GASlC,IAAIC,EAEJ,OAAQD,EAAEE,SACT,KAAK,GACJD,EAAU,OACV,MAED,KAAK,GACJA,EAAU,KACV,MAED,KAAK,GACJA,EAAU,QACV,MAED,KAAK,GACJA,EAAU,OAORA,GACHP,EAAOS,KAAK,gBAAiB,CAAEC,KAAM,OAAQH,cAI/CP,EAAOW,GAAG,eAAgB,SAACC,GAE1BxB,EAAawB,KAGdZ,EAAOW,GAAG,mBAAoB,SAACC,GAC9Bf,QAAQC,IAAI,mBAAoBc,GAChCjB,aAAakB,QAAQ,aAAcpB,KAAKqB,UAAUF,IAClDrB,EAAUqB,KAGJZ,EAAOe,OACZ,IAGFvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAKbQ,GAAaA,EAAU6B,OACvBxC,EAAAC,EAAAC,cAAA,OAAKyB,GAAG,gBACNhB,EAAU6B,MAAMC,IAAI,SAACC,EAAKC,GAAN,OAAaD,EAAID,IAAI,SAACG,EAAMC,GAAP,OAAa7C,EAAAC,EAAAC,cAAC4C,EAADnD,OAAAoD,OAAA,CAAMC,IAAKH,GAAOD,WD5E9D,MAASK,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.70cff8f8.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './Tile.css'\n\nconst Tile = React.memo(function Tile({ player }) {\n\tconst [classNames, setClass] = useState('tile');\n\n\tuseEffect(() => {\n\t\tif (player) {\n\t\t\tsetClass(\"tile player-tile\")\n\t\t}\n\t\telse {\n\t\t\tsetClass(\"tile\")\n\t\t\t// setTimeout(() => {\n\t\t\t// \tsetClass(\"tile\")\n\t\t\t// }, 300);\n\t\t}\n\n\t}, [player])\n\n\treturn (\n\t\t<div className={classNames}></div>\n\t);\n})\n\nexport default Tile;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Tile from \"./components/Tile\";\n\nlet sleeping = false;\n\n// LABYRINTSPEL?!\n// HITTA POWER UPS (göra hål i väggar, skjuta osv)\n\nexport default function App() {\n\tconst [gameState, setGameState] = useState({});\n\tconst [player, setPlayer] = useState();\n\n\tuseEffect(() => {\n\t\tconst cachedPlayer = JSON.parse(localStorage.getItem('game-cache') || '{}');\n\t\tsetPlayer(cachedPlayer)\n\n\t\tconsole.log('connecting to websockets on', window.location.origin);\n\t\tconst socket = window.io(window.location.origin, {\n\t\t\tquery: cachedPlayer.id ? \"playerId=\" + cachedPlayer.id : \"\",\n\t\t\ttransports: ['websocket']\n\t\t});\n\n\t\twindow.addEventListener('keydown', e => {\n\n\t\t\t// prevent spamming the server\n\t\t\t// if (sleeping) return;\n\t\t\t// sleeping = true;\n\t\t\t// setTimeout(() => {\n\t\t\t// \tsleeping = false;\n\t\t\t// }, Math.floor(gameState.tickLengthMs));\n\n\t\t\tlet payload;\n\n\t\t\tswitch (e.keyCode) {\n\t\t\t\tcase 37:\n\t\t\t\t\tpayload = \"LEFT\"\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 38:\n\t\t\t\t\tpayload = \"UP\"\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 39:\n\t\t\t\t\tpayload = \"RIGHT\"\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 40:\n\t\t\t\t\tpayload = \"DOWN\"\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (payload) {\n\t\t\t\tsocket.emit('player:action', { type: 'MOVE', payload })\n\t\t\t}\n\t\t});\n\n\t\tsocket.on('state:update', (data) => {\n\t\t\t//console.log(data);\n\t\t\tsetGameState(data);\n\t\t});\n\n\t\tsocket.on('player:connected', (data) => {\n\t\t\tconsole.log('player:connected', data);\n\t\t\tlocalStorage.setItem('game-cache', JSON.stringify(data));\n\t\t\tsetPlayer(data);\n\t\t});\n\n\t\treturn socket.close;\n\t}, [])\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{/* <div style={{ position: 'absolute', right: 0, height: 300, overflow: 'auto' }}>\n\t\t\t\t<div id=\"player-name\">{player.id}</div>\n\t\t\t\t<pre id=\"state\">{JSON.stringify(gameState, null, 2)}</pre>\n\t\t\t</div> */}\n\t\t\t{gameState && gameState.tiles &&\n\t\t\t\t<div id=\"game-wrapper\">\n\t\t\t\t\t{gameState.tiles.map((row, ri) => row.map((tile, i) => <Tile key={i} {...tile} />))}\n\t\t\t\t</div>\n\t\t\t}\n\t\t</div>\n\t);\n}"],"sourceRoot":""}